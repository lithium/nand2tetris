// Jhack OS - String 
// For the book "The Elements of Computing Systems" (www.nand2tetris.org)
// Author: Matthew Wiggins


/**
 * Represents a String object. Implements the String type.
 */
class String {
    field Array _str;
    field int _capacity;
    field int _size;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let _capacity = maxLength;
        if (maxLength > 0) {
            let _str = Array.new(_capacity);
        } else {
            let _str = null;
        }
        let _size = 0;
        return this;
    }

    function String copy(String string) {
        var String ret;
        var int l;

        let l = string.length();
        let ret = String.new(l);
        do Array.copy(ret.bytes(), string.bytes(), l);
        do ret.setLength(l);
        return ret;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        if (~(_str = null)) {
            do _str.dispose();
            let _str = null;
        }
        let _size = 0;
        let _capacity = 0;
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return _size;
    }

    /** Sets the current length of this String. */
    method void setLength(int newLength) {
        let _size = newLength;
        return;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return _str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        if (j > _capacity | j = _capacity) {
            return;
        }
        let _str[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if (_size+1 = _capacity | _size+1 > _capacity) {
            return this;
        }
        let _str[_size] = c;
        let _size = _size + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let _size = _size - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        return -1;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
    function char ord(String s) {
        return s.charAt(0);
    }


    /** Returns the number of characters at the beginning of the string 
        that match any the characters in _match_ **/
    method int span(String match) {
        var int i;
        let i = 0;

        while (~(match.indexOfChar(charAt(i), 0) = -1)) {
            let i = i + 1;
        }
        return i;
    }

    /** Returns the number of characters at the end of the string 
        that match any the characters in _match_ **/
    method int rspan(String match) {
        var int i;
        var int c;

        let i = length()-1;
        let c = 0;

        while (~(match.indexOfChar(charAt(i), 0) = -1)) {
            let i = i - 1;
            let c = c + 1;
        }
        return c;
    }

    /** Remove any characters from the beginning of the string
        that match any the characters in _match_ **/
    method void lstrip(String match) {
        var int l;
        let l = span(match);
        if (l > 0) {
            let _size = _size - l;
            do Array.copy(_str, _str+l, _size);
        }
        return;
    }

    /** Remove any characters from the end of the string
        that match any the characters in _match_ **/
    method void rstrip(String match) {
        var int l;
        let l = rspan(match);
        if (l > 0) {
            let _size = _size - l;
        }
        return;
    }

    /** Return the pointer to the strings bytes. **/
    method Array bytes() {
        return _str;
    }

    /** Tests string equality against another String. **/
    method boolean equals(String str) {
        var int i;
        var int l;

        let l = length();
        if (~(l = str.length())) {
          return false;
        }

        let i = compare(0, str,0, length());
        if (i = 0) {
            return true;
        } 
        return false;
    }

    /** Find the first occurance of the char c in the string. 
     ** Returns -1 if not found **/
    method int indexOfChar(char c, int offset)
    {
        var int i;
        var int l;

        let l = length();
        let i = offset;
        while (i < l) {
            if (c = charAt(i)) {
                return i;
            }
            let i = i + 1;
        }
        return -1;
    }

    /** Find the last occurance of the char c in the string. 
     ** Returns -1 if not found **/
    method int rightIndexOfChar(char c, int offset)
    {
        var int i;
        var int l;

        let l = length();
        let i = l-1;
        while (i > offset | i = offset) {
          if (c = charAt(i)) {
            return i;
          }
          let i = i - 1;
        }
        return -1;
    }

    /** Find first occurance of the String s 
     ** Returns the index or -1 if not found **/
    method int indexOf(String s)
    {
        var int idx;
        var Array b;
        var int l;

        let b = s.bytes();
        let l = s.length();
        let idx = 0;

        while (idx < _size) {
            let idx = indexOfChar(b[0], idx);
            if (idx = -1) {
                return -1;
            }
            if (idx+l > _size) {
                return -1;
            }

            if (String.cmp(_str+idx, b, l) = 0) {
                return idx;
            }
        }

        return -1;
    }


    method int compare(int offset, String other, int otherOffset, int maxLength) {
        return String.cmp(_str+offset, other.bytes()+otherOffset, maxLength);
    }

    function int cmp(Array s1, Array s2, int maxLength)
    {
        var char c;
        var int i;

        let i = 0;
        while (i < maxLength) {
            let c = s1[i] - s2[i];
            if (~(c = 0)) {
                return c;
            }

            let i = i + 1;
        }
        return 0;
    }



}
