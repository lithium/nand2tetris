


class Jhasm 
{
  field Array _symbolKeys;
  field Array _symbolValues;


  constructor Jhasm new()
  {

    return this; 
  } 

  /*
   * Assemble source lines and return a StringList of Hack binary
   */
  method StringList assemble(StringList inText)
  {
    var StringList out;
    var StringList scrubbed;
    var int i;
    var int l;
    var String line;

    let scrubbed = firstPass(inText);


    /* Second Pass: compile each instruction */
    let i = 0;
    let l = scrubbed.size();
    let out = StringList.new(l);

    while (i < l) {
      do out.add( _compileInstruction(scrubbed.get(i)) );
      let i = i + 1;
    }

    return out;
  }

  /*
   * First Pass:
   *  - strip comments and blank lines
   *  - builds symbol table and strips label lines
   * Returns a new StringList of instructions that should map 1to1 to machine code.
   */
  method StringList firstPass(StringList input) 
  {
    var StringList ret;
    var int i;
    var int l;
    var String line;
    var int idx;
    var int labelStart, labelEnd;
    var String label;
    var int lineno;

    let l = input.size();
    if (l < 1) {
      return null;
    }
    let ret = StringList.new(l);

    let i = 0;
    while (i < l) {
      let line = input.get(i); 

      // strip comments
      let idx = line.indexOf("//");
      if (~(idx = -1)) {
        do line.setLength(idx);
      }

      // strip whitespace
      do line.rstrip(" \t");
      do line.lstrip(" \t");

      // check if its a label
      let label = null;
      let labelStart = line.indexOfChar(40, 0);    // '('
      if (~(labelStart = -1)) {
        let labelEnd = line.indexOfChar(41, labelStart);  // ')'
        if (labelStart = -1) {
          do Output.printString("Invalid label on line ");
          do Output.printInt(ret.size());
          do Output.println();
          do ret.dispose();
          return null;
        }

        let label = line.subString(labelStart+1, labelEnd - labelStart-1);
        let lineno = ret.size();
        do Output.printString("label: ");
        do Output.printString(label);
        do Output.printString("  :");
        do Output.printInt(lineno);
        do Output.println();
      } 


      // add it if its non-empty and it wasnt a label
      if ((label = null) & (line.length() > 0)) {
        do ret.add(line);
      }

      let i = i + 1;
    }

    return ret;
  }

  /*
   * Translate a Hack Assembler mneumonic into Hack Binary
   */
  method String _compileInstruction(String instruction)
  {
    return instruction;
  }
}