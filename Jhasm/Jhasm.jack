


class Jhasm 
{
  field SymbolTable _symbols;
  field int _in, _out;

  static String COMMENT, WHITESPACE;
  static String JMP, JLE, JNE, JLT, JGE, JEQ, JGT;

  static String COMP_0,   COMP_1, COMP_M1, 
                COMP_D,   COMP_A, 
                COMP_ND,  COMP_NA, 
                COMP_MD,  COMP_MA,
                COMP_D1,  COMP_A1,
                COMP_DM1, COMP_AM1,
                COMP_DA,  COMP_DMA, COMP_AMD,
                COMP_DANDA, COMP_DORA;

  function void init() {
    let COMMENT = "//";
    let WHITESPACE = " \t";
    let JMP = "JMP";
    let JLE = "JLE";
    let JNE = "JNE";
    let JLT = "JLT";
    let JGE = "JGE";
    let JEQ = "JEQ";
    let JGT = "JGT";

    let COMP_0 = "0";
    let COMP_1 = "1";
    let COMP_M1 = "-1";
    let COMP_D = "D";
    let COMP_A = "A";
    let COMP_ND = "!D";
    let COMP_NA = "!A";
    let COMP_MD = "-D";
    let COMP_MA = "-A";
    let COMP_D1 = "D+1";
    let COMP_A1 = "A+1";
    let COMP_DM1 = "D-1";
    let COMP_AM1 = "A-1";
    let COMP_DA = "D+A";
    let COMP_DMA = "D-A";
    let COMP_AMD = "A-D";
    let COMP_DANDA = "D&A";
    let COMP_DORA = "D|A";

    do SymbolTable.init();
    return;
  }


  constructor Jhasm new()
  {
    let _symbols = SymbolTable.new();

    return this; 
  } 

  /*
   * read Hack assembly from file inPath and write Hack machine code to outPath. 
   */
  method void assemble(String inPath, String outPath)
  {
    var int i;
    var int l;
    var String line;

    let _in = File.open(inPath, 0);

    do Output.printString("First pass...");
    do firstPass();
    do File.close(_in);


    do Output.printString("Second pass...");

    let _in = File.open(inPath, 0);
    let _out = File.open(outPath, 1);
    do secondPass();
    do File.close(_out);
    do File.close(_in);

    return;
  }

  /*
   * First Pass:
   *  - builds symbol table
   */
  method void firstPass() 
  {
    var String line;
    var int idx;
    var int labelStart, labelEnd;
    var String label;
    var int lineno;

    let lineno=0;
    while (File.ready(_in) = 1) {
      let line = File.readln(_in);

      do Jhasm.stripWhitespace(line);

      // check if its a label
      let label = null;
      let labelStart = line.indexOfChar(40, 0);    // '('
      if (~(labelStart = -1)) {
        let labelEnd = line.indexOfChar(41, labelStart);  // ')'
        if (labelEnd = -1) {
          do Output.printString("Invalid label on line ");
          do Output.printInt(ret.size());
          do Output.println();
          do ret.dispose();
          return;
        }

        let label = line.subString(labelStart+1, labelEnd - labelStart-1);
        do _symbols.setSymbol(label, lineno);
      } 

      // add line if it wasnt a label and its not empty
      if ((label = null) & (line.length() > 0)) {
        let lineno = lineno + 1;
      }

      do line.dispose();
    }

    return;
  }

  /* Second Pass: compile each instruction */
  method void secondPass() {
    var String line;
    var String compiled;
    var int lineno;
    var int labelStart;

    let lineno=1;
    while (File.ready(_in) = 1) {
      let line = File.readln(_in);


      do Jhasm.stripWhitespace(line);
      let labelStart = line.indexOfChar(40, 0);    // '('

      // not a label and non-empty
      if ((labelStart = -1) & (line.length() > 0)) {

        let compiled = _compileInstruction(line);
        if (compiled = null) {
          do Output.printString(line);
          do Output.printString("Invalid instruction on line ");
          do Output.printInt(lineno);
          do Output.println();
          return;
        } 

        do compiled.appendChar(10);     // '\n'
        do File.write(_out, compiled);
        do compiled.dispose();
        let lineno = lineno+1;
      }
      do line.dispose();
    }
    return;
  }


  function void stripWhitespace(String line) 
  {
    var int idx;

    // strip comments
    let idx = line.indexOf(COMMENT);
    if (~(idx = -1)) {
      do line.setLength(idx);
    }

    // strip whitespace
    do line.rstrip(WHITESPACE);
    do line.lstrip(WHITESPACE);

    return;
  }


  /*
   * Translate a Hack Assembler mneumonic into Hack Binary
   */
  method String _compileInstruction(String instruction)
  {
    var String address;
    var String inst;
    var int addr;

    var int compIdx;
    var int jumpIdx;
    var String dest, comp, jump;
    var int d, c, j;
    var int i;

    if (instruction.charAt(0) = 64) {   // '@'
      // A- Instruction

      let address = String.newFromBytes(instruction.bytes()+1, instruction.length()-1);
      let addr = address.intValue();
      if (addr = -1) {
        // no integer constant, assume its a symbol
        let addr = _symbols.resolveSymbol(address);
      }

      return Jhasm.binaryString(addr);
    }

    // C- Instruction

    let compIdx = instruction.indexOfChar(61, 0);   // '=' 
    let jumpIdx = instruction.indexOfChar(59, 0);   // ';' 

    let d = 0;
    let c = 0;
    let j = 0;
    if (~(compIdx = -1)) {
      // dest instruction

      let dest = String.newFromBytes(instruction.bytes(), compIdx);
      let comp = String.newFromBytes(instruction.bytes() + compIdx+1, 
                                     instruction.length()-compIdx-1);

      let d = Jhasm.destFromMneumonic(dest);
      let c = Jhasm.compFromMneumonic(comp);
    } else {
      if (~(jumpIdx = -1)) {
        // jump instruction
        let comp = String.newFromBytes(instruction.bytes(), jumpIdx);
        let jump = String.newFromBytes(instruction.bytes()+jumpIdx+1,
                                       instruction.length()-jumpIdx-1);

        let c = Jhasm.compFromMneumonic(comp);
        let j = Jhasm.jumpFromMneumonic(jump);
      } else {
        // invalid instruction
        return null;
      }
    }

    let i = 0;
    let i = i | ((c & 127) * 64);    // i |= (c & 0x7f) << 6
    let i = i | ((d & 7) * 8);       // i |= (d & 0x7) << 3
    let i = i | (j & 7);             // i |= (j & 0x7)

    let inst = Jhasm.binaryString(i);
    do inst.setCharAt(0, 49);        // i |= 0b1110000000000000
    do inst.setCharAt(1, 49);
    do inst.setCharAt(2, 49);
    return inst;
  }



  /* static funtions */

  function String binaryString(int word)
  {
    var String ret;
    var int i;
    var int mask;

    let ret = String.new(17);   // include space for newline
    let mask = 1;
    let i = 0;
    while (i < 16) {
      if (word & mask) {
        do ret.setCharAt(15-i, 49);    // '1'
      } else {
        do ret.setCharAt(15-i, 48);    // '0'
      }

      let mask = mask * 2;
      let i = i + 1;
    }
    do ret.setLength(16);
    return ret;
  }

  function int destFromMneumonic(String dest)
  {
    var int i;
    var int d;
    let d = 0;

    let i = dest.indexOfChar(65, 0);   // 'A'
    if (~(i = -1)) {
      let d = d | 4;
    }
    let i = dest.indexOfChar(68, 0);   // 'D'
    if (~(i = -1)) {
      let d = d | 2;
    }
    let i = dest.indexOfChar(77, 0);   // 'M'
    if (~(i = -1)) {
      let d = d | 1;
    }
    return d;
  }

  function int jumpFromMneumonic(String jump)
  {
    var Array b;
    let b = jump.bytes();
    if (JMP.cmp(b, 3) = 0) { return 7; }
    if (JLE.cmp(b, 3) = 0) { return 6; }
    if (JNE.cmp(b, 3) = 0) { return 5; }
    if (JLT.cmp(b, 3) = 0) { return 4; }
    if (JGE.cmp(b, 3) = 0) { return 3; }
    if (JEQ.cmp(b, 3) = 0) { return 2; }
    if (JGT.cmp(b, 3) = 0) { return 1; }
    return 0;
  }  

  function int compFromMneumonic(String comp)
  {
    var int i;
    var int c;

    let i = comp.indexOfChar(77, 0);    // 'M'
    if (~(i = -1)) {
      // Memory instruction
      let c = 64;
      do comp.replace(77, 65);   // replace 'M' with 'A'
    } else {
      // Accumulator instruction
      let c = 0;
    }

    return c | Jhasm.acompFromMneumonic(comp);
  } 

  function int acompFromMneumonic(String comp)
  {
    var Array b;
    let b = comp.bytes();
    if (COMP_D1.cmp(b, 3) = 0)    { return 31; }
    if (COMP_A1.cmp(b, 3) = 0)    { return 55; }
    if (COMP_DM1.cmp(b, 3) = 0)   { return 14; }
    if (COMP_AM1.cmp(b, 3) = 0)   { return 50; }
    if (COMP_DA.cmp(b, 3) = 0)    { return 2; }
    if (COMP_DMA.cmp(b, 3) = 0)   { return 19; }
    if (COMP_AMD.cmp(b, 3) = 0)   { return 7; }
    if (COMP_DANDA.cmp(b, 3) = 0) { return 0; }
    if (COMP_DORA.cmp(b, 3) = 0)  { return 21; }
    if (COMP_M1.cmp(b, 2) = 0)    { return 58; }
    if (COMP_ND.cmp(b, 2) = 0)    { return 13; }
    if (COMP_NA.cmp(b, 2) = 0)    { return 49; }
    if (COMP_MD.cmp(b, 2) = 0)    { return 15; }
    if (COMP_MA.cmp(b, 2) = 0)    { return 51; }
    if (COMP_0.cmp(b, 1) = 0)     { return 42; }
    if (COMP_1.cmp(b, 1) = 0)     { return 63; }
    if (COMP_D.cmp(b, 1) = 0)     { return 12; }
    if (COMP_A.cmp(b, 1) = 0)     { return 48; }
    return -1;
  }
}