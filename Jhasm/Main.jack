

class Main {

  function StringList readLines(int fh) {
    var StringList lines;
    var String line;

    let lines = StringList.new(2);

    while (File.ready(fh) = 1) {
      let line = File.readln(fh);
      do lines.add(line);
    }

    return lines;
  }

  function void usage() {
    do Output.printString("Usage: jhasm <file.asm>");
    do Output.println();
    return;
  }

  function String hackFilename(String asmFilename)
  {
    var int idx;
    var String ret;
    var Array b;
    var String const;

    let const = "hack";

    let idx = asmFilename.length() - 4;
    if (String.cmp(asmFilename+idx, ".asm", 4) = -1) {
      return null;
    }

    let ret = String.new(asmFilename.length()+1);

    let b = ret.bytes();
    do Array.copy(b, asmFilename.bytes(), asmFilename.length());
    do Array.copy(b+idx+1, const.bytes(), 4);
    do ret.setLength(idx+5);

    return ret;
  } 

  function void main() {
    var String inputFile, outputFile;
    var int fh;
    var StringList lines;
    var StringList compiled;
    var Jhasm jhasm;
    var String s;

    var int i;
    var int idx;
    var Array b;

    // Parse .asm file from command-line arguments
    if (Sys.argumentCount() < 1) {
      do Main.usage();
      return;
    }
    let inputFile = Sys.argument(0);
    let outputFile = Main.hackFilename(inputFile);




    do Output.printString(" IN:");
    do Output.printString(inputFile);
    do Output.println();
    do Output.printString("OUT:");
    do Output.printString(outputFile);
    do Output.println();

    // read in contents of file 
    let fh = File.open(inputFile, 0);
    let lines = Main.readLines(fh);
    do File.close(fh);

    // translate assembly 
    let jhasm = Jhasm.new();
    let compiled = jhasm.assemble(lines);

    // write out to new file
    //let fh = File.open(outputFile, 1);
    let i = 0;
    while (i < compiled.size()) {
      let s = compiled.get(i);
      do Output.printString(s);
      do Output.println();
      let i = i + 1;
    }
    //do File.close(fh);



    return;
  }
  
}