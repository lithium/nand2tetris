// Jhack OS - String 
// For the book "The Elements of Computing Systems" (www.nand2tetris.org)
// Author: Matthew Wiggins


/**
 * Represents a String object. Implements the String type.
 */
class String {
    field Array _str;
    field int _capacity;
    field int _size;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let _capacity = maxLength;
        if (maxLength > 0) {
            let _str = Array.new(_capacity);
        } else {
            let _str = null;
        }
        let _size = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        if (~(_str = null)) {
            do _str.dispose();
            let _str = null;
        }
        let _size = 0;
        let _capacity = 0;
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return _size;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return _str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        if (j > _capacity | j = _capacity) {
            return;
        }
        let _str[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if (_size+1 = _capacity | _size+1 > _capacity) {
            return this;
        }
        let _str[_size] = c;
        let _size = _size + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let _size = _size - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        return -1;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
    function char ord(String s) {
        return s.charAt(0);
    }


    /** Return the pointer to the strings bytes. **/
    method Array bytes() {
        return _str;
    }

    /** Tests string equality against another String. **/
    method boolean equals(String str) {
        var int i;
        var int l;

        let l = length();
        if (~(l = str.length())) {
          return false;
        }

        let i = 0;
        while (i < l) {
          if (~(charAt(i) = str.charAt(i))) {
            return false;
          }
          let i = i + 1;
        }

        return true;
    }

    /** Find the first occurance of the char c in the string. 
     ** Returns -1 if not found **/
    method int indexOfChar(char c)
    {
        var int i;
        var int l;

        let l = length();
        let i = 0;
        while (i < l) {
            if (c = charAt(i)) {
                return i;
            }
            let i = i + 1;
        }
        return -1;
    }

    /** Find the last occurance of the char c in the string. 
     ** Returns -1 if not found **/
    method int rightIndexOfChar(char c)
    {
        var int i;
        var int l;

        let l = length();
        let i = l-1;
        while (i > 0 | i = 0) {
          if (c = charAt(i)) {
            return i;
          }
          let i = i - 1;
        }
        return -1;
    }






}
