// Hack Memory Chip
// For the book "The Elements of Computing Systems" (www.nand2tetris.org)
// Author: Matthew Wiggins


/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    // if bit[14] and bit[13] set, addressing keyboard
    And(a=address[14], b=address[13], out=addressingKeyboard);

    // if bit[14] set and bit[13] clear, addressing screen
    And(a=true, b=address[14], out=bit14set);
    Not(in=address[13], out=notbit13);
    And(a=bit14set, b=notbit13, out=addressingScreen);

    // otherwise we are addressing ram
    Or(a=addressingScreen, b=addressingKeyboard, out=notAddressingRam);
    Not(in=notAddressingRam, out=addressingRam);


    // RAM chip
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);
    And(a=load, b=addressingRam, out=ramLoad);

    // Screen memory map
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);
    And(a=load, b=addressingScreen, out=screenLoad);

    // Keyboard memory map
    Keyboard(out=keyboardOut);


    // Mux output
    Mux4Way16(a=ramOut, b=ramOut, d=keyboardOut, c=screenOut, sel=address[13..14], out=out);


}