class Jhvm {
  field String _outPath;
  field int _SP;

  static String DOTASM;
  static String DOTVM;
  static String SLASHES;
  static String TRANSLATING;

  static String ADD;
  static String SUB;
  static String NEG;
  static String EQ;
  static String GT;
  static String LT;
  static String AND;
  static String OR;
  static String NOT;
  static String PUSH;
  static String POP;
  static String ARGUMENT;
  static String LOCAL;
  static String STATIC;
  static String CONSTANT;
  static String THIS;
  static String THAT;
  static String POINTER;
  static String TEMP;
  static String LABEL;
  static String GOTO;
  static String IFGOTO;
  static String FUNCTION;
  static String CALL;
  static String RETURN;

  constructor Jhvm new()
  {
    let _SP = 256;
    return this;
  }

  function void init()
  {
    let DOTVM = ".vm";
    let DOTASM = ".asm";
    let SLASHES = "/\\";
    let TRANSLATING = "Translating ";

    let ADD = "add";
    let SUB = "sub";
    let NEG = "neg";
    let EQ = "eq";
    let GT = "gt";
    let LT = "lt";
    let AND = "and";
    let OR = "or";
    let NOT = "not";
    let PUSH = "push";
    let POP = "pop";
    let ARGUMENT = "argument";
    let LOCAL = "local";
    let STATIC = "static";
    let CONSTANT = "constant";
    let THIS = "this";
    let THAT = "that";
    let POINTER = "pointer";
    let TEMP = "temp";
    let LABEL = "label";
    let GOTO = "goto";
    let IFGOTO = "if-goto";
    let FUNCTION = "function";
    let CALL = "call";
    let RETURN = "return";

    do Path.init();
    return;
  }

  method String setOutputPath(String argument)
  {
    var int l;
    var Array a;

    let l = argument.length();
    let a = argument.bytes();

    if (argument.compare(-3, DOTVM, 0, 3) = 0) {
      // replace .vm with .asm

      let _outPath = String.new(l+1);
      do Array.copy(_outPath.bytes(), a, l-2);
      do Array.copy(_outPath.bytes()+l-2, DOTASM.bytes()+1, 3);
      do _outPath.setLength(l+1);
    } else {
      // trim any trailing / and append .asm

      do argument.rstrip(SLASHES);
      let l = argument.length();
      let _outPath = String.new(l+4);
      do Array.copy(_outPath.bytes(), a, l);
      do Array.copy(_outPath.bytes()+l, DOTASM.bytes(), 4);
      do _outPath.setLength(l+4);
    }

    return _outPath;
  }

  method boolean translateFile(String filename)
  {
    var int fh;
    var String line;

    do Output.printString(TRANSLATING);
    do Output.printString(filename);
    do Output.println();


    let fh = File.open(filename, 0);
    if (fh = -1) {
      return false;
    }

    while(File.ready(fh) = 1) {
      let line = File.readln(fh);

        do Output.printString("  ");
        do Output.printString(line);
        do Output.println();

      do line.dispose();
    }
    return true;
  }
}